// Generated by gencpp from file kinect_anywhere/JointPositionAndState.msg
// DO NOT EDIT!


#ifndef KINECT_ANYWHERE_MESSAGE_JOINTPOSITIONANDSTATE_H
#define KINECT_ANYWHERE_MESSAGE_JOINTPOSITIONANDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace kinect_anywhere
{
template <class ContainerAllocator>
struct JointPositionAndState_
{
  typedef JointPositionAndState_<ContainerAllocator> Type;

  JointPositionAndState_()
    : trackingState(0)
    , position()
    , jointType(0)  {
    }
  JointPositionAndState_(const ContainerAllocator& _alloc)
    : trackingState(0)
    , position(_alloc)
    , jointType(0)  {
  (void)_alloc;
    }



   typedef int32_t _trackingState_type;
  _trackingState_type trackingState;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef int32_t _jointType_type;
  _jointType_type jointType;




  typedef boost::shared_ptr< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> const> ConstPtr;

}; // struct JointPositionAndState_

typedef ::kinect_anywhere::JointPositionAndState_<std::allocator<void> > JointPositionAndState;

typedef boost::shared_ptr< ::kinect_anywhere::JointPositionAndState > JointPositionAndStatePtr;
typedef boost::shared_ptr< ::kinect_anywhere::JointPositionAndState const> JointPositionAndStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kinect_anywhere

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'kinect_anywhere': ['/home/baxter/Desktop/PierreROS/src/kinect_anywhere/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "410ba2ac822815f4f20008df55046069";
  }

  static const char* value(const ::kinect_anywhere::JointPositionAndState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x410ba2ac822815f4ULL;
  static const uint64_t static_value2 = 0xf20008df55046069ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinect_anywhere/JointPositionAndState";
  }

  static const char* value(const ::kinect_anywhere::JointPositionAndState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 trackingState\n\
geometry_msgs/Point position\n\
int32 jointType\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::kinect_anywhere::JointPositionAndState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trackingState);
      stream.next(m.position);
      stream.next(m.jointType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointPositionAndState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_anywhere::JointPositionAndState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinect_anywhere::JointPositionAndState_<ContainerAllocator>& v)
  {
    s << indent << "trackingState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trackingState);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "jointType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.jointType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINECT_ANYWHERE_MESSAGE_JOINTPOSITIONANDSTATE_H
