# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinect_anywhere/BodyFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kinect_anywhere.msg
import geometry_msgs.msg
import std_msgs.msg

class BodyFrame(genpy.Message):
  _md5sum = "c8ca6cd86f661b94d3cea79f1dad0380"
  _type = "kinect_anywhere/BodyFrame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Body[] bodies

================================================================================
MSG: kinect_anywhere/Body
Header header
uint64 trackingId
JointPositionAndState[] jointPositions

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: kinect_anywhere/JointPositionAndState
int32 trackingState
geometry_msgs/Point position
int32 jointType

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['bodies']
  _slot_types = ['kinect_anywhere/Body[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bodies

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bodies is None:
        self.bodies = []
    else:
      self.bodies = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.bodies)
      buff.write(_struct_I.pack(length))
      for val1 in self.bodies:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_Q.pack(val1.trackingId))
        length = len(val1.jointPositions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jointPositions:
          buff.write(_struct_i.pack(val2.trackingState))
          _v3 = val2.position
          _x = _v3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          buff.write(_struct_i.pack(val2.jointType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bodies is None:
        self.bodies = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bodies = []
      for i in range(0, length):
        val1 = kinect_anywhere.msg.Body()
        _v4 = val1.header
        start = end
        end += 4
        (_v4.seq,) = _struct_I.unpack(str[start:end])
        _v5 = _v4.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.frame_id = str[start:end].decode('utf-8')
        else:
          _v4.frame_id = str[start:end]
        start = end
        end += 8
        (val1.trackingId,) = _struct_Q.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jointPositions = []
        for i in range(0, length):
          val2 = kinect_anywhere.msg.JointPositionAndState()
          start = end
          end += 4
          (val2.trackingState,) = _struct_i.unpack(str[start:end])
          _v6 = val2.position
          _x = _v6
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          start = end
          end += 4
          (val2.jointType,) = _struct_i.unpack(str[start:end])
          val1.jointPositions.append(val2)
        self.bodies.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.bodies)
      buff.write(_struct_I.pack(length))
      for val1 in self.bodies:
        _v7 = val1.header
        buff.write(_struct_I.pack(_v7.seq))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_Q.pack(val1.trackingId))
        length = len(val1.jointPositions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.jointPositions:
          buff.write(_struct_i.pack(val2.trackingState))
          _v9 = val2.position
          _x = _v9
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          buff.write(_struct_i.pack(val2.jointType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bodies is None:
        self.bodies = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bodies = []
      for i in range(0, length):
        val1 = kinect_anywhere.msg.Body()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _struct_I.unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8')
        else:
          _v10.frame_id = str[start:end]
        start = end
        end += 8
        (val1.trackingId,) = _struct_Q.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.jointPositions = []
        for i in range(0, length):
          val2 = kinect_anywhere.msg.JointPositionAndState()
          start = end
          end += 4
          (val2.trackingState,) = _struct_i.unpack(str[start:end])
          _v12 = val2.position
          _x = _v12
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          start = end
          end += 4
          (val2.jointType,) = _struct_i.unpack(str[start:end])
          val1.jointPositions.append(val2)
        self.bodies.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_i = struct.Struct("<i")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
